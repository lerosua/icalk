!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
BindErrorResponseMsg	stun.h	/^const UInt16 BindErrorResponseMsg         = 0x0111;$/;"	v
BindRequestMsg	stun.h	/^const UInt16 BindRequestMsg               = 0x0001;$/;"	v
BindResponseMsg	stun.h	/^const UInt16 BindResponseMsg              = 0x0101;$/;"	v
ChangeIpFlag	stun.h	/^const UInt32 ChangeIpFlag   = 0x04;$/;"	v
ChangePortFlag	stun.h	/^const UInt32 ChangePortFlag = 0x02;$/;"	v
ChangeRequest	stun.h	/^const UInt16 ChangeRequest    = 0x0003;$/;"	v
ChangedAddress	stun.h	/^const UInt16 ChangedAddress   = 0x0005;$/;"	v
EADDRINUSE	udp.h	32;"	d
EADDRNOTAVAIL	udp.h	33;"	d
EAFNOSUPPORT	udp.h	31;"	d
EALREADY	udp.h	21;"	d
ECONNABORTED	udp.h	37;"	d
ECONNREFUSED	udp.h	45;"	d
ECONNRESET	udp.h	38;"	d
EDESTADDRREQ	udp.h	23;"	d
EDQUOT	udp.h	51;"	d
EHOSTDOWN	udp.h	47;"	d
EHOSTUNREACH	udp.h	48;"	d
EINPROGRESS	udp.h	20;"	d
EISCONN	udp.h	40;"	d
ELOOP	udp.h	46;"	d
EMSGSIZE	udp.h	24;"	d
ENETDOWN	udp.h	34;"	d
ENETRESET	udp.h	36;"	d
ENETUNREACH	udp.h	35;"	d
ENOBUFS	udp.h	39;"	d
ENOPROTOOPT	udp.h	26;"	d
ENOTCONN	udp.h	41;"	d
ENOTSOCK	udp.h	22;"	d
EOPNOTSUPP	udp.h	29;"	d
EPFNOSUPPORT	udp.h	30;"	d
EPROCLIM	udp.h	49;"	d
EPROTONOSUPPORT	udp.h	27;"	d
EPROTOTYPE	udp.h	25;"	d
EREMOTE	udp.h	53;"	d
ESHUTDOWN	udp.h	42;"	d
ESOCKTNOSUPPORT	udp.h	28;"	d
ESTALE	udp.h	52;"	d
ETIMEDOUT	udp.h	44;"	d
ETOOMANYREFS	udp.h	43;"	d
EUSERS	udp.h	50;"	d
EWOULDBLOCK	udp.h	19;"	d
ErrorCode	stun.h	/^const UInt16 ErrorCode        = 0x0009;$/;"	v
HmacBadUserName	stun.h	/^   HmacBadUserName,$/;"	e	enum:stun::<anonymous>
HmacFailed	stun.h	/^   HmacFailed,$/;"	e	enum:stun::<anonymous>
HmacOK	stun.h	/^   HmacOK,$/;"	e	enum:stun::<anonymous>
HmacUnkown	stun.h	/^   HmacUnkown=0,$/;"	e	enum:stun::<anonymous>
HmacUnkownUserName	stun.h	/^   HmacUnkownUserName,$/;"	e	enum:stun::<anonymous>
INVALID_SOCKET	udp.h	/^static const Socket INVALID_SOCKET = -1;$/;"	v
IPv4Family	stun.h	/^const UInt8  IPv4Family = 0x01;$/;"	v
IPv6Family	stun.h	/^const UInt8  IPv6Family = 0x02;$/;"	v
Int64	udp.h	/^typedef LONGLONG Int64; $/;"	t	namespace:stun
MAX_MEDIA_RELAYS	stun.h	204;"	d
MAX_RTP_MSG_SIZE	stun.h	205;"	d
MEDIA_RELAY_TIMEOUT	stun.h	206;"	d
MappedAddress	stun.h	/^const UInt16 MappedAddress    = 0x0001;$/;"	v
MessageIntegrity	stun.h	/^const UInt16 MessageIntegrity = 0x0008;$/;"	v
NOSSL	stun.cpp	33;"	d	file:
NOSSL	stun.cpp	35;"	d	file:
NatType	stun.h	/^} NatType;$/;"	t	namespace:stun
Password	stun.h	/^const UInt16 Password         = 0x0007;$/;"	v
ReflectedFrom	stun.h	/^const UInt16 ReflectedFrom    = 0x000B;$/;"	v
ResponseAddress	stun.h	/^const UInt16 ResponseAddress  = 0x0002;$/;"	v
SOCKET_ERROR	udp.h	/^static const int SOCKET_ERROR = -1;$/;"	v
STUN_H	stun.h	2;"	d
STUN_MAX_MESSAGE_SIZE	stun.h	12;"	d
STUN_MAX_STRING	stun.h	10;"	d
STUN_MAX_UNKNOWN_ATTRIBUTES	stun.h	11;"	d
STUN_PORT	stun.h	14;"	d
STUN_VERSION	stun.h	8;"	d
SecondaryAddress	stun.h	/^const UInt16 SecondaryAddress = 0x8050; \/\/ Non standard extention$/;"	v
ServerName	stun.h	/^const UInt16 ServerName       = 0x8022;$/;"	v
SharedSecretErrorResponseMsg	stun.h	/^const UInt16 SharedSecretErrorResponseMsg = 0x0112;$/;"	v
SharedSecretRequestMsg	stun.h	/^const UInt16 SharedSecretRequestMsg       = 0x0002;$/;"	v
SharedSecretResponseMsg	stun.h	/^const UInt16 SharedSecretResponseMsg      = 0x0102;$/;"	v
Socket	stun.h	/^typedef SOCKET Socket;$/;"	t	namespace:stun
Socket	stun.h	/^typedef int Socket;$/;"	t	namespace:stun
Socket	udp.h	/^typedef SOCKET Socket;$/;"	t	namespace:stun
Socket	udp.h	/^typedef int Socket;$/;"	t	namespace:stun
SourceAddress	stun.h	/^const UInt16 SourceAddress    = 0x0004;$/;"	v
StunAddress4	stun.h	/^} StunAddress4;$/;"	t	namespace:stun
StunAtrAddress4	stun.h	/^} StunAtrAddress4;$/;"	t	namespace:stun
StunAtrChangeRequest	stun.h	/^} StunAtrChangeRequest;$/;"	t	namespace:stun
StunAtrError	stun.h	/^} StunAtrError;$/;"	t	namespace:stun
StunAtrHdr	stun.h	/^} StunAtrHdr;$/;"	t	namespace:stun
StunAtrIntegrity	stun.h	/^} StunAtrIntegrity;$/;"	t	namespace:stun
StunAtrString	stun.h	/^} StunAtrString;$/;"	t	namespace:stun
StunAtrUnknown	stun.h	/^} StunAtrUnknown;$/;"	t	namespace:stun
StunHmacStatus	stun.h	/^} StunHmacStatus;$/;"	t	namespace:stun
StunMediaRelay	stun.h	/^} StunMediaRelay;$/;"	t	namespace:stun
StunMessage	stun.h	/^} StunMessage; $/;"	t	namespace:stun
StunMsgHdr	stun.h	/^} StunMsgHdr;$/;"	t	namespace:stun
StunServerInfo	stun.h	/^} StunServerInfo;$/;"	t	namespace:stun
StunTypeBlocked	stun.h	/^   StunTypeBlocked,$/;"	e	enum:stun::<anonymous>
StunTypeDependentFilter	stun.h	/^   StunTypeDependentFilter,$/;"	e	enum:stun::<anonymous>
StunTypeDependentMapping	stun.h	/^   StunTypeDependentMapping,$/;"	e	enum:stun::<anonymous>
StunTypeFailure	stun.h	/^   StunTypeFailure,$/;"	e	enum:stun::<anonymous>
StunTypeFirewall	stun.h	/^   StunTypeFirewall,$/;"	e	enum:stun::<anonymous>
StunTypeIndependentFilter	stun.h	/^   StunTypeIndependentFilter,$/;"	e	enum:stun::<anonymous>
StunTypeOpen	stun.h	/^   StunTypeOpen,$/;"	e	enum:stun::<anonymous>
StunTypePortDependedFilter	stun.h	/^   StunTypePortDependedFilter,$/;"	e	enum:stun::<anonymous>
StunTypeUnknown	stun.h	/^   StunTypeUnknown=0,$/;"	e	enum:stun::<anonymous>
UInt128	stun.h	/^typedef struct { unsigned char octet[16]; }  UInt128;$/;"	t	namespace:stun
UInt16	stun.h	/^typedef unsigned short UInt16;$/;"	t	namespace:stun
UInt32	stun.h	/^typedef unsigned int   UInt32;$/;"	t	namespace:stun
UInt64	stun.h	/^typedef unsigned __int64 UInt64;$/;"	t	namespace:stun
UInt64	stun.h	/^typedef unsigned long long UInt64;$/;"	t	namespace:stun
UInt8	stun.h	/^typedef unsigned char  UInt8;$/;"	t	namespace:stun
UnknownAttribute	stun.h	/^const UInt16 UnknownAttribute = 0x000A;$/;"	v
Username	stun.h	/^const UInt16 Username         = 0x0006;$/;"	v
WSANOTINITIALISED	udp.h	68;"	d
XorMappedAddress	stun.h	/^const UInt16 XorMappedAddress = 0x8020;$/;"	v
XorOnly	stun.h	/^const UInt16 XorOnly          = 0x0021;$/;"	v
addr	stun.h	/^      UInt32 addr;$/;"	m	struct:stun::<anonymous>	access:public
altAddr	stun.h	/^      StunAddress4 altAddr;$/;"	m	struct:stun::<anonymous>	access:public
altIpFd	stun.h	/^      Socket altIpFd;$/;"	m	struct:stun::<anonymous>	access:public
altIpPortFd	stun.h	/^      Socket altIpPortFd;$/;"	m	struct:stun::<anonymous>	access:public
altPortFd	stun.h	/^      Socket altPortFd;$/;"	m	struct:stun::<anonymous>	access:public
attrType	stun.h	/^      UInt16 attrType[STUN_MAX_UNKNOWN_ATTRIBUTES];$/;"	m	struct:stun::<anonymous>	access:public
changeRequest	stun.h	/^      StunAtrChangeRequest changeRequest;$/;"	m	struct:stun::<anonymous>	access:public
changedAddress	stun.h	/^      StunAtrAddress4 changedAddress;$/;"	m	struct:stun::<anonymous>	access:public
closesocket	udp.h	/^inline int closesocket( Socket fd ) { return close(fd); };$/;"	f	namespace:stun	signature:( Socket fd )
computeHmac	stun.cpp	/^computeHmac(char* hmac, const char* input, int length, const char* key, int keySize);$/;"	p	namespace:stun	file:	signature:(char* hmac, const char* input, int length, const char* key, int keySize)
computeHmac	stun.cpp	/^computeHmac(char* hmac, const char* input, int length, const char* key, int sizeKey)$/;"	f	namespace:stun	file:	signature:(char* hmac, const char* input, int length, const char* key, int sizeKey)
destination	stun.h	/^      StunAddress4 destination; \/\/ NAT IP:port$/;"	m	struct:stun::<anonymous>	access:public
encode	stun.cpp	/^encode(char* buf, const char* data, unsigned int length)$/;"	f	namespace:stun	file:	signature:(char* buf, const char* data, unsigned int length)
encode16	stun.cpp	/^encode16(char* buf, UInt16 data)$/;"	f	namespace:stun	file:	signature:(char* buf, UInt16 data)
encode32	stun.cpp	/^encode32(char* buf, UInt32 data)$/;"	f	namespace:stun	file:	signature:(char* buf, UInt32 data)
encodeAtrAddress4	stun.cpp	/^encodeAtrAddress4(char* ptr, UInt16 type, const StunAtrAddress4& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, UInt16 type, const StunAtrAddress4& atr)
encodeAtrChangeRequest	stun.cpp	/^encodeAtrChangeRequest(char* ptr, const StunAtrChangeRequest& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, const StunAtrChangeRequest& atr)
encodeAtrError	stun.cpp	/^encodeAtrError(char* ptr, const StunAtrError& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, const StunAtrError& atr)
encodeAtrIntegrity	stun.cpp	/^encodeAtrIntegrity(char* ptr, const StunAtrIntegrity& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, const StunAtrIntegrity& atr)
encodeAtrString	stun.cpp	/^encodeAtrString(char* ptr, UInt16 type, const StunAtrString& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, UInt16 type, const StunAtrString& atr)
encodeAtrUnknown	stun.cpp	/^encodeAtrUnknown(char* ptr, const StunAtrUnknown& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, const StunAtrUnknown& atr)
encodeXorOnly	stun.cpp	/^encodeXorOnly(char* ptr)$/;"	f	namespace:stun	file:	signature:(char* ptr)
errorClass	stun.h	/^      UInt8 errorClass;$/;"	m	struct:stun::<anonymous>	access:public
errorCode	stun.h	/^      StunAtrError errorCode;$/;"	m	struct:stun::<anonymous>	access:public
expireTime	stun.h	/^      time_t expireTime;      \/\/ if no activity after time, close the socket $/;"	m	struct:stun::<anonymous>	access:public
family	stun.h	/^      UInt8 family;$/;"	m	struct:stun::<anonymous>	access:public
fd	stun.h	/^      int fd;              \/\/ media relay file descriptor$/;"	m	struct:stun::<anonymous>	access:public
getErrno	udp.h	/^inline int getErrno() { return WSAGetLastError(); }$/;"	f	namespace:stun	signature:()
getErrno	udp.h	/^inline int getErrno() { return errno; }$/;"	f	namespace:stun	signature:()
getMessage	udp.cpp	/^getMessage( Socket fd, char* buf, int* len,$/;"	f	namespace:stun	signature:( Socket fd, char* buf, int* len, unsigned int* srcIp, unsigned short* srcPort, bool verbose)
getMessage	udp.h	/^getMessage( Socket fd, char* buf, int* len,$/;"	p	namespace:stun	signature:( Socket fd, char* buf, int* len, unsigned int* srcIp, unsigned short* srcPort, bool verbose)
hasChangeRequest	stun.h	/^      bool hasChangeRequest;$/;"	m	struct:stun::<anonymous>	access:public
hasChangedAddress	stun.h	/^      bool hasChangedAddress;$/;"	m	struct:stun::<anonymous>	access:public
hasErrorCode	stun.h	/^      bool hasErrorCode;$/;"	m	struct:stun::<anonymous>	access:public
hasMappedAddress	stun.h	/^      bool hasMappedAddress;$/;"	m	struct:stun::<anonymous>	access:public
hasMessageIntegrity	stun.h	/^      bool hasMessageIntegrity;$/;"	m	struct:stun::<anonymous>	access:public
hasPassword	stun.h	/^      bool hasPassword;$/;"	m	struct:stun::<anonymous>	access:public
hasReflectedFrom	stun.h	/^      bool hasReflectedFrom;$/;"	m	struct:stun::<anonymous>	access:public
hasResponseAddress	stun.h	/^      bool hasResponseAddress;$/;"	m	struct:stun::<anonymous>	access:public
hasSecondaryAddress	stun.h	/^      bool hasSecondaryAddress;$/;"	m	struct:stun::<anonymous>	access:public
hasServerName	stun.h	/^      bool hasServerName;$/;"	m	struct:stun::<anonymous>	access:public
hasSourceAddress	stun.h	/^      bool hasSourceAddress;$/;"	m	struct:stun::<anonymous>	access:public
hasUnknownAttributes	stun.h	/^      bool hasUnknownAttributes;$/;"	m	struct:stun::<anonymous>	access:public
hasUsername	stun.h	/^      bool hasUsername;$/;"	m	struct:stun::<anonymous>	access:public
hasXorMappedAddress	stun.h	/^      bool hasXorMappedAddress;$/;"	m	struct:stun::<anonymous>	access:public
hash	stun.h	/^      char hash[20];$/;"	m	struct:stun::<anonymous>	access:public
id	stun.h	/^      UInt128 id;$/;"	m	struct:stun::<anonymous>	access:public
initNetwork	udp.cpp	/^initNetwork()$/;"	f	namespace:stun	signature:()
initNetwork	udp.h	/^initNetwork();$/;"	p	namespace:stun	signature:()
ipv4	stun.h	/^      StunAddress4 ipv4;$/;"	m	struct:stun::<anonymous>	access:public
length	stun.h	/^      UInt16 length;$/;"	m	struct:stun::<anonymous>	access:public
mappedAddress	stun.h	/^      StunAtrAddress4  mappedAddress;$/;"	m	struct:stun::<anonymous>	access:public
messageIntegrity	stun.h	/^      StunAtrIntegrity messageIntegrity;$/;"	m	struct:stun::<anonymous>	access:public
msgHdr	stun.h	/^      StunMsgHdr msgHdr;$/;"	m	struct:stun::<anonymous>	access:public
msgLength	stun.h	/^      UInt16 msgLength;$/;"	m	struct:stun::<anonymous>	access:public
msgType	stun.h	/^      UInt16 msgType;$/;"	m	struct:stun::<anonymous>	access:public
myAddr	stun.h	/^      StunAddress4 myAddr;$/;"	m	struct:stun::<anonymous>	access:public
myFd	stun.h	/^      Socket myFd;$/;"	m	struct:stun::<anonymous>	access:public
numAttributes	stun.h	/^      UInt16 numAttributes;$/;"	m	struct:stun::<anonymous>	access:public
number	stun.h	/^      UInt8 number;$/;"	m	struct:stun::<anonymous>	access:public
octet	stun.h	/^typedef struct { unsigned char octet[16]; }  UInt128;$/;"	m	struct:stun::<anonymous>	access:public
openPort	udp.cpp	/^openPort( unsigned short port, unsigned int interfaceIp, bool verbose )$/;"	f	namespace:stun	signature:( unsigned short port, unsigned int interfaceIp, bool verbose )
openPort	udp.h	/^openPort( unsigned short port, unsigned int interfaceIp,$/;"	p	namespace:stun	signature:( unsigned short port, unsigned int interfaceIp, bool verbose)
operator <<	stun.cpp	/^operator<<( ostream& strm, const StunAddress4& addr)$/;"	f	namespace:stun	signature:( ostream& strm, const StunAddress4& addr)
operator <<	stun.cpp	/^ostream& operator<< ( ostream& strm, const UInt128& r )$/;"	f	namespace:stun	signature:( ostream& strm, const UInt128& r )
operator <<	stun.h	/^operator<< ( std::ostream& strm, const UInt128& );$/;"	p	namespace:stun	signature:( std::ostream& strm, const UInt128& )
operator <<	stun.h	/^operator<<( std::ostream& strm, const StunAddress4& addr);$/;"	p	namespace:stun	signature:( std::ostream& strm, const StunAddress4& addr)
pad	stun.h	/^      UInt16 pad; \/\/ all 0$/;"	m	struct:stun::<anonymous>	access:public
pad	stun.h	/^      UInt8 pad;$/;"	m	struct:stun::<anonymous>	access:public
password	stun.h	/^      StunAtrString password;$/;"	m	struct:stun::<anonymous>	access:public
port	stun.h	/^      UInt16 port;$/;"	m	struct:stun::<anonymous>	access:public
reason	stun.h	/^      char reason[STUN_MAX_STRING];$/;"	m	struct:stun::<anonymous>	access:public
reflectedFrom	stun.h	/^      StunAtrAddress4 reflectedFrom;$/;"	m	struct:stun::<anonymous>	access:public
relay	stun.h	/^      bool relay; \/\/ true if media relaying is to be done$/;"	m	struct:stun::<anonymous>	access:public
relayPort	stun.h	/^      int relayPort;       \/\/ media relay port$/;"	m	struct:stun::<anonymous>	access:public
relays	stun.h	/^      StunMediaRelay relays[MAX_MEDIA_RELAYS];$/;"	m	struct:stun::<anonymous>	access:public
responseAddress	stun.h	/^      StunAtrAddress4  responseAddress;$/;"	m	struct:stun::<anonymous>	access:public
secondaryAddress	stun.h	/^      StunAtrAddress4 secondaryAddress;$/;"	m	struct:stun::<anonymous>	access:public
sendMessage	udp.cpp	/^sendMessage( Socket fd, char* buf, int l, $/;"	f	namespace:stun	signature:( Socket fd, char* buf, int l, unsigned int dstIp, unsigned short dstPort, bool verbose)
sendMessage	udp.h	/^sendMessage( Socket fd, char* msg, int len, $/;"	p	namespace:stun	signature:( Socket fd, char* msg, int len, unsigned int dstIp, unsigned short dstPort, bool verbose)
serverName	stun.h	/^      StunAtrString serverName;$/;"	m	struct:stun::<anonymous>	access:public
sizeReason	stun.h	/^      UInt16 sizeReason;$/;"	m	struct:stun::<anonymous>	access:public
sizeValue	stun.h	/^      UInt16 sizeValue;$/;"	m	struct:stun::<anonymous>	access:public
socklen_t	udp.h	/^typedef int socklen_t;$/;"	t	namespace:stun
sourceAddress	stun.h	/^      StunAtrAddress4 sourceAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun	stun.cpp	/^namespace stun{$/;"	n	file:
stun	stun.h	/^namespace stun {$/;"	n
stun	udp.cpp	/^namespace stun{$/;"	n	file:
stun	udp.h	/^namespace stun{$/;"	n
stun::<anonymous>::addr	stun.h	/^      UInt32 addr;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::altAddr	stun.h	/^      StunAddress4 altAddr;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::altIpFd	stun.h	/^      Socket altIpFd;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::altIpPortFd	stun.h	/^      Socket altIpPortFd;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::altPortFd	stun.h	/^      Socket altPortFd;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::attrType	stun.h	/^      UInt16 attrType[STUN_MAX_UNKNOWN_ATTRIBUTES];$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::changeRequest	stun.h	/^      StunAtrChangeRequest changeRequest;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::changedAddress	stun.h	/^      StunAtrAddress4 changedAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::destination	stun.h	/^      StunAddress4 destination; \/\/ NAT IP:port$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::errorClass	stun.h	/^      UInt8 errorClass;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::errorCode	stun.h	/^      StunAtrError errorCode;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::expireTime	stun.h	/^      time_t expireTime;      \/\/ if no activity after time, close the socket $/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::family	stun.h	/^      UInt8 family;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::fd	stun.h	/^      int fd;              \/\/ media relay file descriptor$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasChangeRequest	stun.h	/^      bool hasChangeRequest;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasChangedAddress	stun.h	/^      bool hasChangedAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasErrorCode	stun.h	/^      bool hasErrorCode;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasMappedAddress	stun.h	/^      bool hasMappedAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasMessageIntegrity	stun.h	/^      bool hasMessageIntegrity;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasPassword	stun.h	/^      bool hasPassword;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasReflectedFrom	stun.h	/^      bool hasReflectedFrom;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasResponseAddress	stun.h	/^      bool hasResponseAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasSecondaryAddress	stun.h	/^      bool hasSecondaryAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasServerName	stun.h	/^      bool hasServerName;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasSourceAddress	stun.h	/^      bool hasSourceAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasUnknownAttributes	stun.h	/^      bool hasUnknownAttributes;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasUsername	stun.h	/^      bool hasUsername;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hasXorMappedAddress	stun.h	/^      bool hasXorMappedAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::hash	stun.h	/^      char hash[20];$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::id	stun.h	/^      UInt128 id;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::ipv4	stun.h	/^      StunAddress4 ipv4;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::length	stun.h	/^      UInt16 length;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::mappedAddress	stun.h	/^      StunAtrAddress4  mappedAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::messageIntegrity	stun.h	/^      StunAtrIntegrity messageIntegrity;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::msgHdr	stun.h	/^      StunMsgHdr msgHdr;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::msgLength	stun.h	/^      UInt16 msgLength;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::msgType	stun.h	/^      UInt16 msgType;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::myAddr	stun.h	/^      StunAddress4 myAddr;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::myFd	stun.h	/^      Socket myFd;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::numAttributes	stun.h	/^      UInt16 numAttributes;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::number	stun.h	/^      UInt8 number;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::octet	stun.h	/^typedef struct { unsigned char octet[16]; }  UInt128;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::pad	stun.h	/^      UInt16 pad; \/\/ all 0$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::pad	stun.h	/^      UInt8 pad;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::password	stun.h	/^      StunAtrString password;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::port	stun.h	/^      UInt16 port;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::reason	stun.h	/^      char reason[STUN_MAX_STRING];$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::reflectedFrom	stun.h	/^      StunAtrAddress4 reflectedFrom;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::relay	stun.h	/^      bool relay; \/\/ true if media relaying is to be done$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::relayPort	stun.h	/^      int relayPort;       \/\/ media relay port$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::relays	stun.h	/^      StunMediaRelay relays[MAX_MEDIA_RELAYS];$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::responseAddress	stun.h	/^      StunAtrAddress4  responseAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::secondaryAddress	stun.h	/^      StunAtrAddress4 secondaryAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::serverName	stun.h	/^      StunAtrString serverName;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::sizeReason	stun.h	/^      UInt16 sizeReason;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::sizeValue	stun.h	/^      UInt16 sizeValue;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::sourceAddress	stun.h	/^      StunAtrAddress4 sourceAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::type	stun.h	/^      UInt16 type;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::unknownAttributes	stun.h	/^      StunAtrUnknown unknownAttributes;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::username	stun.h	/^      StunAtrString username;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::value	stun.h	/^      UInt32 value;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::value	stun.h	/^      char value[STUN_MAX_STRING];      $/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::xorMappedAddress	stun.h	/^      StunAtrAddress4  xorMappedAddress;$/;"	m	struct:stun::<anonymous>	access:public
stun::<anonymous>::xorOnly	stun.h	/^      bool xorOnly;$/;"	m	struct:stun::<anonymous>	access:public
stun::BindErrorResponseMsg	stun.h	/^const UInt16 BindErrorResponseMsg         = 0x0111;$/;"	v
stun::BindRequestMsg	stun.h	/^const UInt16 BindRequestMsg               = 0x0001;$/;"	v
stun::BindResponseMsg	stun.h	/^const UInt16 BindResponseMsg              = 0x0101;$/;"	v
stun::ChangeIpFlag	stun.h	/^const UInt32 ChangeIpFlag   = 0x04;$/;"	v
stun::ChangePortFlag	stun.h	/^const UInt32 ChangePortFlag = 0x02;$/;"	v
stun::ChangeRequest	stun.h	/^const UInt16 ChangeRequest    = 0x0003;$/;"	v
stun::ChangedAddress	stun.h	/^const UInt16 ChangedAddress   = 0x0005;$/;"	v
stun::ErrorCode	stun.h	/^const UInt16 ErrorCode        = 0x0009;$/;"	v
stun::HmacBadUserName	stun.h	/^   HmacBadUserName,$/;"	e	enum:stun::<anonymous>
stun::HmacFailed	stun.h	/^   HmacFailed,$/;"	e	enum:stun::<anonymous>
stun::HmacOK	stun.h	/^   HmacOK,$/;"	e	enum:stun::<anonymous>
stun::HmacUnkown	stun.h	/^   HmacUnkown=0,$/;"	e	enum:stun::<anonymous>
stun::HmacUnkownUserName	stun.h	/^   HmacUnkownUserName,$/;"	e	enum:stun::<anonymous>
stun::INVALID_SOCKET	udp.h	/^static const Socket INVALID_SOCKET = -1;$/;"	v
stun::IPv4Family	stun.h	/^const UInt8  IPv4Family = 0x01;$/;"	v
stun::IPv6Family	stun.h	/^const UInt8  IPv6Family = 0x02;$/;"	v
stun::Int64	udp.h	/^typedef LONGLONG Int64; $/;"	t	namespace:stun
stun::MappedAddress	stun.h	/^const UInt16 MappedAddress    = 0x0001;$/;"	v
stun::MessageIntegrity	stun.h	/^const UInt16 MessageIntegrity = 0x0008;$/;"	v
stun::NatType	stun.h	/^} NatType;$/;"	t	namespace:stun
stun::Password	stun.h	/^const UInt16 Password         = 0x0007;$/;"	v
stun::ReflectedFrom	stun.h	/^const UInt16 ReflectedFrom    = 0x000B;$/;"	v
stun::ResponseAddress	stun.h	/^const UInt16 ResponseAddress  = 0x0002;$/;"	v
stun::SOCKET_ERROR	udp.h	/^static const int SOCKET_ERROR = -1;$/;"	v
stun::SecondaryAddress	stun.h	/^const UInt16 SecondaryAddress = 0x8050; \/\/ Non standard extention$/;"	v
stun::ServerName	stun.h	/^const UInt16 ServerName       = 0x8022;$/;"	v
stun::SharedSecretErrorResponseMsg	stun.h	/^const UInt16 SharedSecretErrorResponseMsg = 0x0112;$/;"	v
stun::SharedSecretRequestMsg	stun.h	/^const UInt16 SharedSecretRequestMsg       = 0x0002;$/;"	v
stun::SharedSecretResponseMsg	stun.h	/^const UInt16 SharedSecretResponseMsg      = 0x0102;$/;"	v
stun::Socket	stun.h	/^typedef SOCKET Socket;$/;"	t	namespace:stun
stun::Socket	stun.h	/^typedef int Socket;$/;"	t	namespace:stun
stun::Socket	udp.h	/^typedef SOCKET Socket;$/;"	t	namespace:stun
stun::Socket	udp.h	/^typedef int Socket;$/;"	t	namespace:stun
stun::SourceAddress	stun.h	/^const UInt16 SourceAddress    = 0x0004;$/;"	v
stun::StunAddress4	stun.h	/^} StunAddress4;$/;"	t	namespace:stun
stun::StunAtrAddress4	stun.h	/^} StunAtrAddress4;$/;"	t	namespace:stun
stun::StunAtrChangeRequest	stun.h	/^} StunAtrChangeRequest;$/;"	t	namespace:stun
stun::StunAtrError	stun.h	/^} StunAtrError;$/;"	t	namespace:stun
stun::StunAtrHdr	stun.h	/^} StunAtrHdr;$/;"	t	namespace:stun
stun::StunAtrIntegrity	stun.h	/^} StunAtrIntegrity;$/;"	t	namespace:stun
stun::StunAtrString	stun.h	/^} StunAtrString;$/;"	t	namespace:stun
stun::StunAtrUnknown	stun.h	/^} StunAtrUnknown;$/;"	t	namespace:stun
stun::StunHmacStatus	stun.h	/^} StunHmacStatus;$/;"	t	namespace:stun
stun::StunMediaRelay	stun.h	/^} StunMediaRelay;$/;"	t	namespace:stun
stun::StunMessage	stun.h	/^} StunMessage; $/;"	t	namespace:stun
stun::StunMsgHdr	stun.h	/^} StunMsgHdr;$/;"	t	namespace:stun
stun::StunServerInfo	stun.h	/^} StunServerInfo;$/;"	t	namespace:stun
stun::StunTypeBlocked	stun.h	/^   StunTypeBlocked,$/;"	e	enum:stun::<anonymous>
stun::StunTypeDependentFilter	stun.h	/^   StunTypeDependentFilter,$/;"	e	enum:stun::<anonymous>
stun::StunTypeDependentMapping	stun.h	/^   StunTypeDependentMapping,$/;"	e	enum:stun::<anonymous>
stun::StunTypeFailure	stun.h	/^   StunTypeFailure,$/;"	e	enum:stun::<anonymous>
stun::StunTypeFirewall	stun.h	/^   StunTypeFirewall,$/;"	e	enum:stun::<anonymous>
stun::StunTypeIndependentFilter	stun.h	/^   StunTypeIndependentFilter,$/;"	e	enum:stun::<anonymous>
stun::StunTypeOpen	stun.h	/^   StunTypeOpen,$/;"	e	enum:stun::<anonymous>
stun::StunTypePortDependedFilter	stun.h	/^   StunTypePortDependedFilter,$/;"	e	enum:stun::<anonymous>
stun::StunTypeUnknown	stun.h	/^   StunTypeUnknown=0,$/;"	e	enum:stun::<anonymous>
stun::UInt128	stun.h	/^typedef struct { unsigned char octet[16]; }  UInt128;$/;"	t	namespace:stun
stun::UInt16	stun.h	/^typedef unsigned short UInt16;$/;"	t	namespace:stun
stun::UInt32	stun.h	/^typedef unsigned int   UInt32;$/;"	t	namespace:stun
stun::UInt64	stun.h	/^typedef unsigned __int64 UInt64;$/;"	t	namespace:stun
stun::UInt64	stun.h	/^typedef unsigned long long UInt64;$/;"	t	namespace:stun
stun::UInt8	stun.h	/^typedef unsigned char  UInt8;$/;"	t	namespace:stun
stun::UnknownAttribute	stun.h	/^const UInt16 UnknownAttribute = 0x000A;$/;"	v
stun::Username	stun.h	/^const UInt16 Username         = 0x0006;$/;"	v
stun::XorMappedAddress	stun.h	/^const UInt16 XorMappedAddress = 0x8020;$/;"	v
stun::XorOnly	stun.h	/^const UInt16 XorOnly          = 0x0021;$/;"	v
stun::closesocket	udp.h	/^inline int closesocket( Socket fd ) { return close(fd); };$/;"	f	namespace:stun	signature:( Socket fd )
stun::computeHmac	stun.cpp	/^computeHmac(char* hmac, const char* input, int length, const char* key, int keySize);$/;"	p	namespace:stun	file:	signature:(char* hmac, const char* input, int length, const char* key, int keySize)
stun::computeHmac	stun.cpp	/^computeHmac(char* hmac, const char* input, int length, const char* key, int sizeKey)$/;"	f	namespace:stun	file:	signature:(char* hmac, const char* input, int length, const char* key, int sizeKey)
stun::encode	stun.cpp	/^encode(char* buf, const char* data, unsigned int length)$/;"	f	namespace:stun	file:	signature:(char* buf, const char* data, unsigned int length)
stun::encode16	stun.cpp	/^encode16(char* buf, UInt16 data)$/;"	f	namespace:stun	file:	signature:(char* buf, UInt16 data)
stun::encode32	stun.cpp	/^encode32(char* buf, UInt32 data)$/;"	f	namespace:stun	file:	signature:(char* buf, UInt32 data)
stun::encodeAtrAddress4	stun.cpp	/^encodeAtrAddress4(char* ptr, UInt16 type, const StunAtrAddress4& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, UInt16 type, const StunAtrAddress4& atr)
stun::encodeAtrChangeRequest	stun.cpp	/^encodeAtrChangeRequest(char* ptr, const StunAtrChangeRequest& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, const StunAtrChangeRequest& atr)
stun::encodeAtrError	stun.cpp	/^encodeAtrError(char* ptr, const StunAtrError& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, const StunAtrError& atr)
stun::encodeAtrIntegrity	stun.cpp	/^encodeAtrIntegrity(char* ptr, const StunAtrIntegrity& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, const StunAtrIntegrity& atr)
stun::encodeAtrString	stun.cpp	/^encodeAtrString(char* ptr, UInt16 type, const StunAtrString& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, UInt16 type, const StunAtrString& atr)
stun::encodeAtrUnknown	stun.cpp	/^encodeAtrUnknown(char* ptr, const StunAtrUnknown& atr)$/;"	f	namespace:stun	file:	signature:(char* ptr, const StunAtrUnknown& atr)
stun::encodeXorOnly	stun.cpp	/^encodeXorOnly(char* ptr)$/;"	f	namespace:stun	file:	signature:(char* ptr)
stun::getErrno	udp.h	/^inline int getErrno() { return WSAGetLastError(); }$/;"	f	namespace:stun	signature:()
stun::getErrno	udp.h	/^inline int getErrno() { return errno; }$/;"	f	namespace:stun	signature:()
stun::getMessage	udp.cpp	/^getMessage( Socket fd, char* buf, int* len,$/;"	f	namespace:stun	signature:( Socket fd, char* buf, int* len, unsigned int* srcIp, unsigned short* srcPort, bool verbose)
stun::getMessage	udp.h	/^getMessage( Socket fd, char* buf, int* len,$/;"	p	namespace:stun	signature:( Socket fd, char* buf, int* len, unsigned int* srcIp, unsigned short* srcPort, bool verbose)
stun::initNetwork	udp.cpp	/^initNetwork()$/;"	f	namespace:stun	signature:()
stun::initNetwork	udp.h	/^initNetwork();$/;"	p	namespace:stun	signature:()
stun::openPort	udp.cpp	/^openPort( unsigned short port, unsigned int interfaceIp, bool verbose )$/;"	f	namespace:stun	signature:( unsigned short port, unsigned int interfaceIp, bool verbose )
stun::openPort	udp.h	/^openPort( unsigned short port, unsigned int interfaceIp,$/;"	p	namespace:stun	signature:( unsigned short port, unsigned int interfaceIp, bool verbose)
stun::operator <<	stun.cpp	/^operator<<( ostream& strm, const StunAddress4& addr)$/;"	f	namespace:stun	signature:( ostream& strm, const StunAddress4& addr)
stun::operator <<	stun.cpp	/^ostream& operator<< ( ostream& strm, const UInt128& r )$/;"	f	namespace:stun	signature:( ostream& strm, const UInt128& r )
stun::operator <<	stun.h	/^operator<< ( std::ostream& strm, const UInt128& );$/;"	p	namespace:stun	signature:( std::ostream& strm, const UInt128& )
stun::operator <<	stun.h	/^operator<<( std::ostream& strm, const StunAddress4& addr);$/;"	p	namespace:stun	signature:( std::ostream& strm, const StunAddress4& addr)
stun::sendMessage	udp.cpp	/^sendMessage( Socket fd, char* buf, int l, $/;"	f	namespace:stun	signature:( Socket fd, char* buf, int l, unsigned int dstIp, unsigned short dstPort, bool verbose)
stun::sendMessage	udp.h	/^sendMessage( Socket fd, char* msg, int len, $/;"	p	namespace:stun	signature:( Socket fd, char* msg, int len, unsigned int dstIp, unsigned short dstPort, bool verbose)
stun::socklen_t	udp.h	/^typedef int socklen_t;$/;"	t	namespace:stun
stun::stunBuildReqSimple	stun.cpp	/^stunBuildReqSimple( StunMessage* msg,$/;"	f	namespace:stun	signature:( StunMessage* msg, const StunAtrString& username, bool changePort, bool changeIp, unsigned int id )
stun::stunBuildReqSimple	stun.h	/^stunBuildReqSimple( StunMessage* msg,$/;"	p	namespace:stun	signature:( StunMessage* msg, const StunAtrString& username, bool changePort, bool changeIp, unsigned int id=0 )
stun::stunCreateErrorResponse	stun.cpp	/^stunCreateErrorResponse(StunMessage& response, int cl, int number, const char* msg)$/;"	f	namespace:stun	file:	signature:(StunMessage& response, int cl, int number, const char* msg)
stun::stunCreatePassword	stun.cpp	/^stunCreatePassword(const StunAtrString& username, StunAtrString* password)$/;"	f	namespace:stun	signature:(const StunAtrString& username, StunAtrString* password)
stun::stunCreatePassword	stun.h	/^stunCreatePassword(const StunAtrString& username, StunAtrString* password);$/;"	p	namespace:stun	signature:(const StunAtrString& username, StunAtrString* password)
stun::stunCreateSharedSecretResponse	stun.cpp	/^stunCreateSharedSecretResponse(const StunMessage& request, const StunAddress4& source, StunMessage& response)$/;"	f	namespace:stun	file:	signature:(const StunMessage& request, const StunAddress4& source, StunMessage& response)
stun::stunCreateUserName	stun.cpp	/^stunCreateUserName(const StunAddress4& source, StunAtrString* username)$/;"	f	namespace:stun	signature:(const StunAddress4& source, StunAtrString* username)
stun::stunCreateUserName	stun.h	/^stunCreateUserName(const StunAddress4& addr, StunAtrString* username);$/;"	p	namespace:stun	signature:(const StunAddress4& addr, StunAtrString* username)
stun::stunEncodeMessage	stun.cpp	/^stunEncodeMessage( const StunMessage& msg, $/;"	f	namespace:stun	signature:( const StunMessage& msg, char* buf, unsigned int bufLen, const StunAtrString& password, bool verbose)
stun::stunEncodeMessage	stun.h	/^stunEncodeMessage( const StunMessage& message, $/;"	p	namespace:stun	signature:( const StunMessage& message, char* buf, unsigned int bufLen, const StunAtrString& password, bool verbose)
stun::stunFindLocalInterfaces	stun.cpp	/^stunFindLocalInterfaces(UInt32* addresses,int maxRet)$/;"	f	namespace:stun	signature:(UInt32* addresses,int maxRet)
stun::stunFindLocalInterfaces	stun.h	/^stunFindLocalInterfaces(UInt32* addresses, int maxSize );$/;"	p	namespace:stun	signature:(UInt32* addresses, int maxSize )
stun::stunGetSystemTimeSecs	stun.cpp	/^stunGetSystemTimeSecs()$/;"	f	namespace:stun	signature:()
stun::stunGetSystemTimeSecs	stun.h	/^stunGetSystemTimeSecs();$/;"	p	namespace:stun	signature:()
stun::stunGetUserNameAndPassword	stun.cpp	/^stunGetUserNameAndPassword(  const StunAddress4& dest, $/;"	f	namespace:stun	signature:( const StunAddress4& dest, StunAtrString* username, StunAtrString* password)
stun::stunGetUserNameAndPassword	stun.h	/^stunGetUserNameAndPassword(  const StunAddress4& dest, $/;"	p	namespace:stun	signature:( const StunAddress4& dest, StunAtrString* username, StunAtrString* password)
stun::stunInitServer	stun.cpp	/^stunInitServer(StunServerInfo& info, const StunAddress4& myAddr,$/;"	f	namespace:stun	signature:(StunServerInfo& info, const StunAddress4& myAddr, const StunAddress4& altAddr, int startMediaPort, bool verbose )
stun::stunInitServer	stun.h	/^stunInitServer(StunServerInfo& info, $/;"	p	namespace:stun	signature:(StunServerInfo& info, const StunAddress4& myAddr, const StunAddress4& altAddr, int startMediaPort, bool verbose)
stun::stunNatType	stun.cpp	/^stunNatType( StunAddress4& dest, $/;"	f	namespace:stun	signature:( StunAddress4& dest, bool verbose, bool* preservePort, bool* hairpin, int port, StunAddress4* sAddr )
stun::stunNatType	stun.h	/^stunNatType( StunAddress4& dest, bool verbose, $/;"	p	namespace:stun	signature:( StunAddress4& dest, bool verbose, bool* preservePort=0, bool* hairpin=0 , int port=0, StunAddress4* sAddr=0 )
stun::stunOpenSocket	stun.cpp	/^stunOpenSocket( StunAddress4& dest, StunAddress4* mapAddr, $/;"	f	namespace:stun	signature:( StunAddress4& dest, StunAddress4* mapAddr, int port, StunAddress4* srcAddr, bool verbose )
stun::stunOpenSocket	stun.h	/^stunOpenSocket( StunAddress4& dest, $/;"	p	namespace:stun	signature:( StunAddress4& dest, StunAddress4* mappedAddr, int port=0, StunAddress4* srcAddr=0, bool verbose=false )
stun::stunOpenSocketPair	stun.cpp	/^stunOpenSocketPair( StunAddress4& dest, StunAddress4* mapAddr, $/;"	f	namespace:stun	signature:( StunAddress4& dest, StunAddress4* mapAddr, int* fd1, int* fd2, int port, StunAddress4* srcAddr, bool verbose )
stun::stunOpenSocketPair	stun.h	/^stunOpenSocketPair( StunAddress4& dest, StunAddress4* mappedAddr, $/;"	p	namespace:stun	signature:( StunAddress4& dest, StunAddress4* mappedAddr, int* fd1, int* fd2, int srcPort=0, StunAddress4* srcAddr=0, bool verbose=false)
stun::stunParseAtrAddress	stun.cpp	/^stunParseAtrAddress( char* body, unsigned int hdrLen,  StunAtrAddress4& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrAddress4& result )
stun::stunParseAtrChangeRequest	stun.cpp	/^stunParseAtrChangeRequest( char* body, unsigned int hdrLen,  StunAtrChangeRequest& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrChangeRequest& result )
stun::stunParseAtrError	stun.cpp	/^stunParseAtrError( char* body, unsigned int hdrLen,  StunAtrError& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrError& result )
stun::stunParseAtrIntegrity	stun.cpp	/^stunParseAtrIntegrity( char* body, unsigned int hdrLen,  StunAtrIntegrity& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrIntegrity& result )
stun::stunParseAtrString	stun.cpp	/^stunParseAtrString( char* body, unsigned int hdrLen,  StunAtrString& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrString& result )
stun::stunParseAtrUnknown	stun.cpp	/^stunParseAtrUnknown( char* body, unsigned int hdrLen,  StunAtrUnknown& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrUnknown& result )
stun::stunParseHostName	stun.cpp	/^stunParseHostName( char* peerName,$/;"	f	namespace:stun	signature:( char* peerName, UInt32& ip, UInt16& portVal, UInt16 defaultPort )
stun::stunParseHostName	stun.h	/^stunParseHostName( char* peerName,$/;"	p	namespace:stun	signature:( char* peerName, UInt32& ip, UInt16& portVal, UInt16 defaultPort )
stun::stunParseMessage	stun.cpp	/^stunParseMessage( char* buf, unsigned int bufLen, StunMessage& msg, bool verbose)$/;"	f	namespace:stun	signature:( char* buf, unsigned int bufLen, StunMessage& msg, bool verbose)
stun::stunParseMessage	stun.h	/^stunParseMessage( char* buf, $/;"	p	namespace:stun	signature:( char* buf, unsigned int bufLen, StunMessage& message, bool verbose )
stun::stunParseServerName	stun.cpp	/^stunParseServerName( char* name, StunAddress4& addr)$/;"	f	namespace:stun	signature:( char* name, StunAddress4& addr)
stun::stunParseServerName	stun.h	/^stunParseServerName( char* serverName, StunAddress4& stunServerAddr);$/;"	p	namespace:stun	signature:( char* serverName, StunAddress4& stunServerAddr)
stun::stunRand	stun.cpp	/^stunRand()$/;"	f	namespace:stun	signature:()
stun::stunRand	stun.h	/^stunRand();$/;"	p	namespace:stun	signature:()
stun::stunRandomPort	stun.cpp	/^stunRandomPort()$/;"	f	namespace:stun	signature:()
stun::stunRandomPort	stun.h	/^stunRandomPort();$/;"	p	namespace:stun	signature:()
stun::stunSendTest	stun.cpp	/^stunSendTest( Socket myFd, StunAddress4& dest, $/;"	f	namespace:stun	file:	signature:( Socket myFd, StunAddress4& dest, const StunAtrString& username, const StunAtrString& password, int testNum, bool verbose )
stun::stunServerProcess	stun.cpp	/^stunServerProcess(StunServerInfo& info, bool verbose)$/;"	f	namespace:stun	signature:(StunServerInfo& info, bool verbose)
stun::stunServerProcess	stun.h	/^stunServerProcess(StunServerInfo& info, bool verbose);$/;"	p	namespace:stun	signature:(StunServerInfo& info, bool verbose)
stun::stunServerProcessMsg	stun.cpp	/^stunServerProcessMsg( char* buf,$/;"	f	namespace:stun	signature:( char* buf, unsigned int bufLen, StunAddress4& from, StunAddress4& secondary, StunAddress4& myAddr, StunAddress4& altAddr, StunMessage* resp, StunAddress4* destination, StunAtrString* hmacPassword, bool* changePort, bool* changeIp, bool verbose)
stun::stunServerProcessMsg	stun.h	/^stunServerProcessMsg( char* buf,$/;"	p	namespace:stun	signature:( char* buf, unsigned int bufLen, StunAddress4& from, StunAddress4& myAddr, StunAddress4& altAddr, StunMessage* resp, StunAddress4* destination, StunAtrString* hmacPassword, bool* changePort, bool* changeIp, bool verbose)
stun::stunStopServer	stun.cpp	/^stunStopServer(StunServerInfo& info)$/;"	f	namespace:stun	signature:(StunServerInfo& info)
stun::stunStopServer	stun.h	/^stunStopServer(StunServerInfo& info);$/;"	p	namespace:stun	signature:(StunServerInfo& info)
stun::stunTest	stun.cpp	/^stunTest( StunAddress4& dest, int testNum, bool verbose, StunAddress4* sAddr )$/;"	f	namespace:stun	signature:( StunAddress4& dest, int testNum, bool verbose, StunAddress4* sAddr )
stun::stunTest	stun.h	/^stunTest( StunAddress4& dest, int testNum, bool verbose, StunAddress4* srcAddr=0 );$/;"	p	namespace:stun	signature:( StunAddress4& dest, int testNum, bool verbose, StunAddress4* srcAddr=0 )
stun::toHex	stun.cpp	/^toHex(const char* buffer, int bufferSize, char* output) $/;"	f	namespace:stun	file:	signature:(const char* buffer, int bufferSize, char* output)
stunBuildReqSimple	stun.cpp	/^stunBuildReqSimple( StunMessage* msg,$/;"	f	namespace:stun	signature:( StunMessage* msg, const StunAtrString& username, bool changePort, bool changeIp, unsigned int id )
stunBuildReqSimple	stun.h	/^stunBuildReqSimple( StunMessage* msg,$/;"	p	namespace:stun	signature:( StunMessage* msg, const StunAtrString& username, bool changePort, bool changeIp, unsigned int id=0 )
stunCreateErrorResponse	stun.cpp	/^stunCreateErrorResponse(StunMessage& response, int cl, int number, const char* msg)$/;"	f	namespace:stun	file:	signature:(StunMessage& response, int cl, int number, const char* msg)
stunCreatePassword	stun.cpp	/^stunCreatePassword(const StunAtrString& username, StunAtrString* password)$/;"	f	namespace:stun	signature:(const StunAtrString& username, StunAtrString* password)
stunCreatePassword	stun.h	/^stunCreatePassword(const StunAtrString& username, StunAtrString* password);$/;"	p	namespace:stun	signature:(const StunAtrString& username, StunAtrString* password)
stunCreateSharedSecretResponse	stun.cpp	/^stunCreateSharedSecretResponse(const StunMessage& request, const StunAddress4& source, StunMessage& response)$/;"	f	namespace:stun	file:	signature:(const StunMessage& request, const StunAddress4& source, StunMessage& response)
stunCreateUserName	stun.cpp	/^stunCreateUserName(const StunAddress4& source, StunAtrString* username)$/;"	f	namespace:stun	signature:(const StunAddress4& source, StunAtrString* username)
stunCreateUserName	stun.h	/^stunCreateUserName(const StunAddress4& addr, StunAtrString* username);$/;"	p	namespace:stun	signature:(const StunAddress4& addr, StunAtrString* username)
stunEncodeMessage	stun.cpp	/^stunEncodeMessage( const StunMessage& msg, $/;"	f	namespace:stun	signature:( const StunMessage& msg, char* buf, unsigned int bufLen, const StunAtrString& password, bool verbose)
stunEncodeMessage	stun.h	/^stunEncodeMessage( const StunMessage& message, $/;"	p	namespace:stun	signature:( const StunMessage& message, char* buf, unsigned int bufLen, const StunAtrString& password, bool verbose)
stunFindLocalInterfaces	stun.cpp	/^stunFindLocalInterfaces(UInt32* addresses,int maxRet)$/;"	f	namespace:stun	signature:(UInt32* addresses,int maxRet)
stunFindLocalInterfaces	stun.h	/^stunFindLocalInterfaces(UInt32* addresses, int maxSize );$/;"	p	namespace:stun	signature:(UInt32* addresses, int maxSize )
stunGetSystemTimeSecs	stun.cpp	/^stunGetSystemTimeSecs()$/;"	f	namespace:stun	signature:()
stunGetSystemTimeSecs	stun.h	/^stunGetSystemTimeSecs();$/;"	p	namespace:stun	signature:()
stunGetUserNameAndPassword	stun.cpp	/^stunGetUserNameAndPassword(  const StunAddress4& dest, $/;"	f	namespace:stun	signature:( const StunAddress4& dest, StunAtrString* username, StunAtrString* password)
stunGetUserNameAndPassword	stun.h	/^stunGetUserNameAndPassword(  const StunAddress4& dest, $/;"	p	namespace:stun	signature:( const StunAddress4& dest, StunAtrString* username, StunAtrString* password)
stunInitServer	stun.cpp	/^stunInitServer(StunServerInfo& info, const StunAddress4& myAddr,$/;"	f	namespace:stun	signature:(StunServerInfo& info, const StunAddress4& myAddr, const StunAddress4& altAddr, int startMediaPort, bool verbose )
stunInitServer	stun.h	/^stunInitServer(StunServerInfo& info, $/;"	p	namespace:stun	signature:(StunServerInfo& info, const StunAddress4& myAddr, const StunAddress4& altAddr, int startMediaPort, bool verbose)
stunNatType	stun.cpp	/^stunNatType( StunAddress4& dest, $/;"	f	namespace:stun	signature:( StunAddress4& dest, bool verbose, bool* preservePort, bool* hairpin, int port, StunAddress4* sAddr )
stunNatType	stun.h	/^stunNatType( StunAddress4& dest, bool verbose, $/;"	p	namespace:stun	signature:( StunAddress4& dest, bool verbose, bool* preservePort=0, bool* hairpin=0 , int port=0, StunAddress4* sAddr=0 )
stunOpenSocket	stun.cpp	/^stunOpenSocket( StunAddress4& dest, StunAddress4* mapAddr, $/;"	f	namespace:stun	signature:( StunAddress4& dest, StunAddress4* mapAddr, int port, StunAddress4* srcAddr, bool verbose )
stunOpenSocket	stun.h	/^stunOpenSocket( StunAddress4& dest, $/;"	p	namespace:stun	signature:( StunAddress4& dest, StunAddress4* mappedAddr, int port=0, StunAddress4* srcAddr=0, bool verbose=false )
stunOpenSocketPair	stun.cpp	/^stunOpenSocketPair( StunAddress4& dest, StunAddress4* mapAddr, $/;"	f	namespace:stun	signature:( StunAddress4& dest, StunAddress4* mapAddr, int* fd1, int* fd2, int port, StunAddress4* srcAddr, bool verbose )
stunOpenSocketPair	stun.h	/^stunOpenSocketPair( StunAddress4& dest, StunAddress4* mappedAddr, $/;"	p	namespace:stun	signature:( StunAddress4& dest, StunAddress4* mappedAddr, int* fd1, int* fd2, int srcPort=0, StunAddress4* srcAddr=0, bool verbose=false)
stunParseAtrAddress	stun.cpp	/^stunParseAtrAddress( char* body, unsigned int hdrLen,  StunAtrAddress4& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrAddress4& result )
stunParseAtrChangeRequest	stun.cpp	/^stunParseAtrChangeRequest( char* body, unsigned int hdrLen,  StunAtrChangeRequest& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrChangeRequest& result )
stunParseAtrError	stun.cpp	/^stunParseAtrError( char* body, unsigned int hdrLen,  StunAtrError& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrError& result )
stunParseAtrIntegrity	stun.cpp	/^stunParseAtrIntegrity( char* body, unsigned int hdrLen,  StunAtrIntegrity& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrIntegrity& result )
stunParseAtrString	stun.cpp	/^stunParseAtrString( char* body, unsigned int hdrLen,  StunAtrString& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrString& result )
stunParseAtrUnknown	stun.cpp	/^stunParseAtrUnknown( char* body, unsigned int hdrLen,  StunAtrUnknown& result )$/;"	f	namespace:stun	file:	signature:( char* body, unsigned int hdrLen, StunAtrUnknown& result )
stunParseHostName	stun.cpp	/^stunParseHostName( char* peerName,$/;"	f	namespace:stun	signature:( char* peerName, UInt32& ip, UInt16& portVal, UInt16 defaultPort )
stunParseHostName	stun.h	/^stunParseHostName( char* peerName,$/;"	p	namespace:stun	signature:( char* peerName, UInt32& ip, UInt16& portVal, UInt16 defaultPort )
stunParseMessage	stun.cpp	/^stunParseMessage( char* buf, unsigned int bufLen, StunMessage& msg, bool verbose)$/;"	f	namespace:stun	signature:( char* buf, unsigned int bufLen, StunMessage& msg, bool verbose)
stunParseMessage	stun.h	/^stunParseMessage( char* buf, $/;"	p	namespace:stun	signature:( char* buf, unsigned int bufLen, StunMessage& message, bool verbose )
stunParseServerName	stun.cpp	/^stunParseServerName( char* name, StunAddress4& addr)$/;"	f	namespace:stun	signature:( char* name, StunAddress4& addr)
stunParseServerName	stun.h	/^stunParseServerName( char* serverName, StunAddress4& stunServerAddr);$/;"	p	namespace:stun	signature:( char* serverName, StunAddress4& stunServerAddr)
stunRand	stun.cpp	/^stunRand()$/;"	f	namespace:stun	signature:()
stunRand	stun.h	/^stunRand();$/;"	p	namespace:stun	signature:()
stunRandomPort	stun.cpp	/^stunRandomPort()$/;"	f	namespace:stun	signature:()
stunRandomPort	stun.h	/^stunRandomPort();$/;"	p	namespace:stun	signature:()
stunSendTest	stun.cpp	/^stunSendTest( Socket myFd, StunAddress4& dest, $/;"	f	namespace:stun	file:	signature:( Socket myFd, StunAddress4& dest, const StunAtrString& username, const StunAtrString& password, int testNum, bool verbose )
stunServerProcess	stun.cpp	/^stunServerProcess(StunServerInfo& info, bool verbose)$/;"	f	namespace:stun	signature:(StunServerInfo& info, bool verbose)
stunServerProcess	stun.h	/^stunServerProcess(StunServerInfo& info, bool verbose);$/;"	p	namespace:stun	signature:(StunServerInfo& info, bool verbose)
stunServerProcessMsg	stun.cpp	/^stunServerProcessMsg( char* buf,$/;"	f	namespace:stun	signature:( char* buf, unsigned int bufLen, StunAddress4& from, StunAddress4& secondary, StunAddress4& myAddr, StunAddress4& altAddr, StunMessage* resp, StunAddress4* destination, StunAtrString* hmacPassword, bool* changePort, bool* changeIp, bool verbose)
stunServerProcessMsg	stun.h	/^stunServerProcessMsg( char* buf,$/;"	p	namespace:stun	signature:( char* buf, unsigned int bufLen, StunAddress4& from, StunAddress4& myAddr, StunAddress4& altAddr, StunMessage* resp, StunAddress4* destination, StunAtrString* hmacPassword, bool* changePort, bool* changeIp, bool verbose)
stunStopServer	stun.cpp	/^stunStopServer(StunServerInfo& info)$/;"	f	namespace:stun	signature:(StunServerInfo& info)
stunStopServer	stun.h	/^stunStopServer(StunServerInfo& info);$/;"	p	namespace:stun	signature:(StunServerInfo& info)
stunTest	stun.cpp	/^stunTest( StunAddress4& dest, int testNum, bool verbose, StunAddress4* sAddr )$/;"	f	namespace:stun	signature:( StunAddress4& dest, int testNum, bool verbose, StunAddress4* sAddr )
stunTest	stun.h	/^stunTest( StunAddress4& dest, int testNum, bool verbose, StunAddress4* srcAddr=0 );$/;"	p	namespace:stun	signature:( StunAddress4& dest, int testNum, bool verbose, StunAddress4* srcAddr=0 )
toHex	stun.cpp	/^toHex(const char* buffer, int bufferSize, char* output) $/;"	f	namespace:stun	file:	signature:(const char* buffer, int bufferSize, char* output)
type	stun.h	/^      UInt16 type;$/;"	m	struct:stun::<anonymous>	access:public
udp_h	udp.h	2;"	d
unknownAttributes	stun.h	/^      StunAtrUnknown unknownAttributes;$/;"	m	struct:stun::<anonymous>	access:public
username	stun.h	/^      StunAtrString username;$/;"	m	struct:stun::<anonymous>	access:public
value	stun.h	/^      UInt32 value;$/;"	m	struct:stun::<anonymous>	access:public
value	stun.h	/^      char value[STUN_MAX_STRING];      $/;"	m	struct:stun::<anonymous>	access:public
xorMappedAddress	stun.h	/^      StunAtrAddress4  xorMappedAddress;$/;"	m	struct:stun::<anonymous>	access:public
xorOnly	stun.h	/^      bool xorOnly;$/;"	m	struct:stun::<anonymous>	access:public
